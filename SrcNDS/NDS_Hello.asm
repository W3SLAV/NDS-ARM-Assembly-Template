
.equ RamArea,0x02F00000
.equ CursorX,RamArea+0
.equ CursorY,RamArea+1


	.org 0x02000000-0x8000	;&200 byte header - code starts at offset &8000
HeaderStart:
		;  123456789012
	.ascii "Example Game";000h    12    Game Title  (Uppercase ASCII, padded with 00h)
	.ascii "0000"		;00Ch    4     Gamecode    (Uppercase ASCII, NTR-<code>)        (0=homebrew)
	.ascii "00"			;010h    2     Makercode   (Uppercase ASCII, eg. "01"=Nintendo) (0=homebrew)
	.byte 0				;012h    1     Unitcode    (00h=NDS, 02h=NDS+DSi, 03h=DSi) (bit1=DSi)
	.byte 0				;013h    1     Encryption Seed Select (00..07h, usually 00h)
	.byte 0				;014h    1     Devicecapacity         (Chipsize = 128KB SHL nn) (eg. 7 = 16MB)
	.space 7			;015h    7     Reserved    (zero filled)	
	.byte 0				;01Ch    1     Reserved    (zero)                      (except, used on DSi)
	.byte 0				;01Dh    1     NDS Region  (00h=Normal, 80h=China, 40h=Korea) (other on DSi)
	.byte 0				;01Eh    1     ROM Version (usually 00h)
	.byte 4     		;01Fh    1     Autostart (Bit2: Skip "Press Button" after Health and Safety)
	.long Arm9_Start-HeaderStart;  020h    4     ARM9 rom_offset    (4000h and up, align 1000h)
	.long 0x02000000	;024h    4     ARM9 entry_address (2000000h..23BFE00h)
	.long 0x02000000	;028h    4     ARM9 ram_address   (2000000h..23BFE00h)
	.long Arm9_End-Arm9_Start;02Ch    4     ARM9 size          (max 3BFE00h) (3839.5KB)
	.long Arm7_Start-HeaderStart;030h    4     ARM7 rom_offset    (8000h and up)
	.long 0x03800000	;034h    4     ARM7 entry_address (2000000h..23BFE00h, or 37F8000h..3807E00h)
	.long 0x03800000	;038h    4     ARM7 ram_address   (2000000h..23BFE00h, or 37F8000h..3807E00h)
	.long Arm7_End-Arm7_Start;03Ch    4     ARM7 size          (max 3BFE00h, or FE00h) (3839.5KB, 63.5KB)
	.long 0				;040h    4     File Name Table (FNT) offset
	.long 0				;044h    4     File Name Table (FNT) size
	.long 0				;048h    4     File Allocation Table (FAT) offset
	.long 0				;04Ch    4     File Allocation Table (FAT) size
	.long 0				;050h    4     File ARM9 overlay_offset
	.long 0				;054h    4     File ARM9 overlay_size
	.long 0				;058h    4     File ARM7 overlay_offset
	.long 0				;05Ch    4     File ARM7 overlay_size
	.long 0x00586000	;060h    4     Port 40001A4h setting for normal commands (usually 00586000h)
	.long 0x001808F8	;064h    4     Port 40001A4h setting for KEY1 commands   (usually 001808F8h)
	.long 0				;068h    4     Icon/Title offset (0=None) (8000h and up)
	.word 0				;06Ch    2     Secure Area Checksum, CRC-16 of [[020h]..00007FFFh]
	.word 0				;06Eh    2     Secure Area Delay (in 131kHz units) (051Eh=10ms or 0D7Eh=26ms)
	.long 0				;070h    4     ARM9 Auto Load List Hook RAM Address (?) ;\endaddr of auto-load
	.long 0				;074h    4     ARM7 Auto Load List Hook RAM Address (?) ;/functions
	.space 8			;078h    8     Secure Area Disable (by encrypted "NmMdOnly") (usually zero)
	.long 0				;080h    4     Total Used ROM size (remaining/unused bytes usually FFh-padded)
	.long 0x4000		;084h    4     ROM Header Size (4000h)
	.space 0x28			;088h    28h   Reserved (zero filled; except, [88h..93h] used on DSi)
	.space 0x10			;0B0h    10h   Reserved (zero filled; or "DoNotZeroFillMem"=unlaunch fastboot)
;0C0h    9Ch   Nintendo Logo (compressed bitmap, same as in GBA Headers)
	.space 0x9C
	.word 0				;15Ch    2     Nintendo Logo Checksum, CRC-16 of [0C0h-15Bh], fixed CF56h
	.word 0			    ;15Eh    2     Header Checksum, CRC-16 of [000h-15Dh]
	.long 0				;160h    4     Debug rom_offset   (0=none) (8000h and up)       ;only if debug
	.long 0				;164h    4     Debug size         (0=none) (max 3BFE00h)        ;version with
	.long 0				;168h    4     Debug ram_address  (0=none) (2400000h..27BFE00h) ;SIO and 8MB
	.long 0				;16Ch    4     Reserved (zero filled) (transferred, and stored, but not used)
	.space 0x90			;170h    90h   Reserved (zero filled) (transferred, but not stored in RAM)
	.space 0x7E00-4		
	
Arm7_Start:
	b Arm7_Start		;Infloop for ARM 7
Arm7_End:


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 
Arm9_Start:
	mov sp,#0x03000000	;Set up our stack pointer
	
	mov r0, #0x4000000
	add r0, r0, #0x304	;4000304h - NDS9 - POWCNT1 - Graphics Power Control Register (R/W)
	
	mov r1, #0x8003		;2D + Enable
	str r1, [r0]
			
	mov r0, #0x04000000	;4000000h - DISPCNT - LCD Control (Read/Write)
	mov r1, #0x00020000
	str r1, [r0]		;2  Engine A only: VRAM Display (Bitmap from block selected in DISPCNT.18-19)
	
	mov r0, #0x04000000
	add r0, r0, #0x240
	mov r1, #0x80		;Enable
	strb r1, [r0]		;4000240h - NDS9 - VRAMCNT_A - 8bit - VRAM-A (128K) Bank Control (W)

	
	
	
	ldr r1,HelloWorldAddress	;String we want to show
	bl PrintString				;Show it
	
InfLoop:
      b InfLoop
	
HelloWorldAddress:
	.long HelloWorld			;Pointer to hello world message
	
HelloWorld:
	.byte "Hello World on the DS :)",255
	.align 4
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PrintString:
	STMFD sp!,{r0-r12, lr}
PrintStringAgain:
		ldrB r0,[r1],#1
		cmps r0,#255
		beq PrintStringDone
		bl printchar 
		b PrintStringAgain
PrintStringDone:
	LDMFD sp!,{r0-r12, pc}
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	
PrintChar:
	STMFD sp!,{r0-r12, lr}
		mov r3,#0x06800000 	;VRAM base
		
		mov r5,#CursorX
		ldrB r4,[r5]		;Xpos
		add r3,r3,r4, lsl #4;Xpos * 16
		
		mov r5,#CursorY
		ldrB r4,[r5]		;Ypos
		mov r5,#256*8*2		;Ypos * 8 lines
		mul r2,r5,r4
		add r3,r3,r2
				
				
		adr r4,BitmapFont 	;Font source
		sub r0,r0,#32		;First Char is 32 (Space)
		add r4,r4,r0,asl #3	;8 bytes per char
		
		
		
		mov r1,#8			;8 lines 
DrawLine:
		mov r7,#8 			;8 pixels per line
		ldrb r8,[r4],#1		;Load Letter
		mov r9,#0b100000000	;Mask

				;  -BBBBBGGGGGRRRRR
		mov r2, #0b0000001111111111	; Color
DrawPixel:
		tst r8,r9			;Is bit 1?
		strneh r2,[r3]		;Yes? then fill pixel
		add r3,r3,#2
		mov r9,r9,ror #1	;Bitshift Mask
		subs r7,r7,#1
		bne DrawPixel		;Next Hpixel
		
		add r3,r3,#512-16	;Move Down a line
		subs r1,r1,#1
		bne DrawLine		;Next Vline
		
		mov r3,#CursorX
		ldrB r0,[r3]	
		add r0,r0,#1		;Move across screen
		strB r0,[r3]	
	LDMFD sp!,{r0-r12, pc}
	
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
		
BitmapFont:
        .byte 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00     ;  0
        .byte 0x10,0x18,0x18,0x18,0x18,0x00,0x18,0x00     ;  1
        .byte 0x28,0x6C,0x28,0x00,0x00,0x00,0x00,0x00     ;  2
        .byte 0x00,0x28,0x7C,0x28,0x7C,0x28,0x00,0x00     ;  3
        .byte 0x18,0x3E,0x48,0x3C,0x12,0x7C,0x18,0x00     ;  4
        .byte 0x02,0xC4,0xC8,0x10,0x20,0x46,0x86,0x00     ;  5
        .byte 0x10,0x28,0x28,0x72,0x94,0x8C,0x72,0x00     ;  6
        .byte 0x0C,0x1C,0x30,0x00,0x00,0x00,0x00,0x00     ;  7
        .byte 0x18,0x18,0x30,0x30,0x30,0x18,0x18,0x00     ;  8
        .byte 0x18,0x18,0x0C,0x0C,0x0C,0x18,0x18,0x00     ;  9
        .byte 0x08,0x49,0x2A,0x1C,0x14,0x22,0x41,0x00     ; 10
        .byte 0x00,0x18,0x18,0x7E,0x18,0x18,0x00,0x00     ; 11
        .byte 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x30     ; 12
        .byte 0x00,0x00,0x00,0x7E,0x7E,0x00,0x00,0x00     ; 13
        .byte 0x00,0x00,0x00,0x00,0x00,0x18,0x18,0x00     ; 14
        .byte 0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x00     ; 15
        .byte 0x7C,0xC6,0xD6,0xD6,0xD6,0xC6,0x7C,0x00     ; 16
        .byte 0x10,0x18,0x18,0x18,0x18,0x18,0x08,0x00     ; 17
        .byte 0x3C,0x7E,0x06,0x3C,0x60,0x7E,0x3C,0x00     ; 18
        .byte 0x3C,0x7E,0x06,0x1C,0x06,0x7E,0x3C,0x00     ; 19
        .byte 0x18,0x3C,0x64,0xCC,0x7C,0x0C,0x08,0x00     ; 20
        .byte 0x3C,0x7E,0x60,0x7C,0x06,0x7E,0x3E,0x00     ; 21
        .byte 0x3C,0x7E,0x60,0x7C,0x66,0x66,0x3C,0x00     ; 22
        .byte 0x3C,0x7E,0x06,0x0C,0x18,0x18,0x10,0x00     ; 23
        .byte 0x3C,0x66,0x66,0x3C,0x66,0x66,0x3C,0x00     ; 24
        .byte 0x3C,0x66,0x66,0x3E,0x06,0x7E,0x3C,0x00     ; 25
        .byte 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x00     ; 26
        .byte 0x00,0x00,0x18,0x18,0x00,0x18,0x18,0x30     ; 27
        .byte 0x0C,0x1C,0x38,0x60,0x38,0x1C,0x0C,0x00     ; 28
        .byte 0x00,0x00,0x7E,0x00,0x00,0x7E,0x00,0x00     ; 29
        .byte 0x60,0x70,0x38,0x0C,0x38,0x70,0x60,0x00     ; 30
        .byte 0x3C,0x76,0x06,0x1C,0x00,0x18,0x18,0x00     ; 31
        .byte 0x7C,0xCE,0xA6,0xB6,0xC6,0xF0,0x7C,0x00     ; 32
        .byte 0x18,0x3C,0x66,0x66,0x7E,0x66,0x24,0x00     ; 33
        .byte 0x3C,0x66,0x66,0x7C,0x66,0x66,0x3C,0x00     ; 34
        .byte 0x38,0x7C,0xC0,0xC0,0xC0,0x7C,0x38,0x00     ; 35
        .byte 0x3C,0x64,0x66,0x66,0x66,0x64,0x38,0x00     ; 36
        .byte 0x3C,0x7E,0x60,0x78,0x60,0x7E,0x3C,0x00     ; 37
        .byte 0x38,0x7C,0x60,0x78,0x60,0x60,0x20,0x00     ; 38
        .byte 0x3C,0x66,0xC0,0xC0,0xCC,0x66,0x3C,0x00     ; 39
        .byte 0x24,0x66,0x66,0x7E,0x66,0x66,0x24,0x00     ; 40
        .byte 0x10,0x18,0x18,0x18,0x18,0x18,0x08,0x00     ; 41
        .byte 0x08,0x0C,0x0C,0x0C,0x4C,0xFC,0x78,0x00     ; 42
        .byte 0x24,0x66,0x6C,0x78,0x6C,0x66,0x24,0x00     ; 43
        .byte 0x20,0x60,0x60,0x60,0x60,0x7E,0x3E,0x00     ; 44
        .byte 0x44,0xEE,0xFE,0xD6,0xD6,0xD6,0x44,0x00     ; 45
        .byte 0x44,0xE6,0xF6,0xDE,0xCE,0xC6,0x44,0x00     ; 46
        .byte 0x38,0x6C,0xC6,0xC6,0xC6,0x6C,0x38,0x00     ; 47
        .byte 0x38,0x6C,0x64,0x7C,0x60,0x60,0x20,0x00     ; 48
        .byte 0x38,0x6C,0xC6,0xC6,0xCA,0x74,0x3A,0x00     ; 49
        .byte 0x3C,0x66,0x66,0x7C,0x6C,0x66,0x26,0x00     ; 50
        .byte 0x3C,0x7E,0x60,0x3C,0x06,0x7E,0x3C,0x00     ; 51
        .byte 0x3C,0x7E,0x18,0x18,0x18,0x18,0x08,0x00     ; 52
        .byte 0x24,0x66,0x66,0x66,0x66,0x66,0x3C,0x00     ; 53
        .byte 0x24,0x66,0x66,0x66,0x66,0x3C,0x18,0x00     ; 54
        .byte 0x44,0xC6,0xD6,0xD6,0xFE,0xEE,0x44,0x00     ; 55
        .byte 0xC6,0x6C,0x38,0x38,0x6C,0xC6,0x44,0x00     ; 56
        .byte 0x24,0x66,0x66,0x3C,0x18,0x18,0x08,0x00     ; 57
        .byte 0x7C,0xFC,0x0C,0x18,0x30,0x7E,0x7C,0x00     ; 58
        .byte 0x1C,0x30,0x30,0x30,0x30,0x30,0x1C,0x00     ; 59
        .byte 0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x00     ; 60
        .byte 0x38,0x0C,0x0C,0x0C,0x0C,0x0C,0x38,0x00     ; 61
        .byte 0x18,0x18,0x18,0x18,0x7E,0x7E,0x18,0x18     ; 62
        .byte 0x18,0x18,0x18,0x18,0x3C,0x3C,0x18,0x18     ; 63
        .byte 0x18,0x18,0x18,0x18,0x18,0x18,0x18,0x18     ; 64
        .byte 0x00,0x00,0x38,0x0C,0x7C,0xCC,0x78,0x00     ; 65
        .byte 0x20,0x60,0x7C,0x66,0x66,0x66,0x3C,0x00     ; 66
        .byte 0x00,0x00,0x3C,0x66,0x60,0x66,0x3C,0x00     ; 67
        .byte 0x08,0x0C,0x7C,0xCC,0xCC,0xCC,0x78,0x00     ; 68
        .byte 0x00,0x00,0x3C,0x66,0x7E,0x60,0x3C,0x00     ; 69
        .byte 0x1C,0x36,0x30,0x38,0x30,0x30,0x10,0x00     ; 70
        .byte 0x00,0x00,0x3C,0x66,0x66,0x3E,0x06,0x3C     ; 71
        .byte 0x20,0x60,0x6C,0x76,0x66,0x66,0x24,0x00     ; 72
        .byte 0x18,0x00,0x18,0x18,0x18,0x18,0x08,0x00     ; 73
        .byte 0x06,0x00,0x04,0x06,0x06,0x26,0x66,0x3C     ; 74
        .byte 0x20,0x60,0x66,0x6C,0x78,0x6C,0x26,0x00     ; 75
        .byte 0x10,0x18,0x18,0x18,0x18,0x18,0x08,0x00     ; 76
        .byte 0x00,0x00,0x6C,0xFE,0xD6,0xD6,0xC6,0x00     ; 77
        .byte 0x00,0x00,0x3C,0x66,0x66,0x66,0x24,0x00     ; 78
        .byte 0x00,0x00,0x3C,0x66,0x66,0x66,0x3C,0x00     ; 79
        .byte 0x00,0x00,0x3C,0x66,0x66,0x7C,0x60,0x20     ; 80
        .byte 0x00,0x00,0x78,0xCC,0xCC,0x7C,0x0C,0x08     ; 81
        .byte 0x00,0x00,0x38,0x7C,0x60,0x60,0x20,0x00     ; 82
        .byte 0x00,0x00,0x3C,0x60,0x3C,0x06,0x7C,0x00     ; 83
        .byte 0x10,0x30,0x3C,0x30,0x30,0x3E,0x1C,0x00     ; 84
        .byte 0x00,0x00,0x24,0x66,0x66,0x66,0x3C,0x00     ; 85
        .byte 0x00,0x00,0x24,0x66,0x66,0x3C,0x18,0x00     ; 86
        .byte 0x00,0x00,0x44,0xD6,0xD6,0xFE,0x6C,0x00     ; 87
        .byte 0x00,0x00,0xC6,0x6C,0x38,0x6C,0xC6,0x00     ; 88
        .byte 0x00,0x00,0x24,0x66,0x66,0x3E,0x06,0x7C     ; 89
        .byte 0x00,0x00,0x7E,0x0C,0x18,0x30,0x7E,0x00     ; 90
        .byte 0x08,0x08,0x08,0x08,0x56,0x55,0x57,0x74     ; 91
        .byte 0x18,0x04,0x08,0x1C,0x56,0x55,0x57,0x74     ; 92
        .byte 0x00,0x00,0x00,0x00,0x7E,0x7E,0xFF,0xFF     ; 93
        .byte 0x18,0x3C,0x18,0x18,0x18,0x18,0x7E,0xFF     ; 94
        .byte 0x22,0x77,0x7F,0x7F,0x3E,0x1C,0x08,0x00     ; 95
Arm9_End: